@page "/"
@inject JsonFileStorageService StorageService 

<PageTitle>Inicio - GoalGrid</PageTitle> 

<h1 class="welcome-title">Bienvenido a GoalGrid</h1>

<div class="day-column">
    <div class="day-header">
        <h4>Tareas para Hoy (@DateTime.Today.ToString("dd MMMM"))</h4>
    </div>
    <div class="tasks-list">
        @if (TodayTasks != null && TodayTasks.Any()) 
        {
            @foreach (var task in TodayTasks) 
            {
                <div class="task-item @(task.IsCompleted ? "completed" : "")">
                    <input type="checkbox" @bind="task.IsCompleted" @bind:after="() => UpdateTaskStatus(task)" /> 
                    <span class="task-description">@task.Description</span>
                    <button class="btn btn-danger btn-sm delete-task-btn" @onclick="(() => RemoveTask(task))">X</button> 
                </div>
            }
        }
        else
        {
            <p class="no-tasks-message">No hay tareas para hoy.</p> 
        }
    </div>
    
    

</div>

@code {
    private List<DailyTask> TodayTasks { get; set; } = new List<DailyTask>();
    private Dictionary<DateTime, List<DailyTask>> AllTasks { get; set; } = new Dictionary<DateTime, List<DailyTask>>();

    protected override async Task OnInitializedAsync()
    {
        // Cargar todas las tareas
        AllTasks = await StorageService.LoadTasksAsync();
        if (AllTasks == null)
        {
            AllTasks = new Dictionary<DateTime, List<DailyTask>>();
        }

        // Obtener solo las tareas para el día de hoy
        if (AllTasks.ContainsKey(DateTime.Today.Date))
        {
            TodayTasks = AllTasks[DateTime.Today.Date];
        }
        else
        {
            TodayTasks = new List<DailyTask>(); 
            AllTasks[DateTime.Today.Date] = TodayTasks; 
        }
    }

    
    private async Task UpdateTaskStatus(DailyTask task)
    {
        await StorageService.SaveTasksAsync(AllTasks); 
    }

    
    private async Task RemoveTask(DailyTask taskToRemove)
    {
        if (TodayTasks.Contains(taskToRemove))
        {
            TodayTasks.Remove(taskToRemove);
            await StorageService.SaveTasksAsync(AllTasks); 
        }
    }
}
@page "/weeklyplanner"
@inject GoalGridApp.Services.JsonFileStorageService StorageService 
@using System.Globalization;

<PageTitle>Planificador Semanal - GoalGrid</PageTitle>

<div class="weekly-planner-container">
    <h3 class="planner-title">Planificador Semanal de Metas</h3>

    <div class="weekly-navigation">
        <button class="btn btn-primary" @onclick="PreviousWeek">Semana Anterior</button>
        <span class="current-week-display">Semana: @StartDate.ToString("dd MMM") - @EndDate.ToString("dd MMM yyyy")</span>
        <button class="btn btn-primary" @onclick="NextWeek">Semana Siguiente</button>
    </div>

    <div class="week-grid">
        @foreach (var day in DaysOfWeek)
        {
            <div class="day-column">
                <div class="day-header">
                    <h4>@day.Date.ToString("ddd d")</h4> @* Ej: Lun 15 *@
                </div>
                <div class="tasks-list">
                    @foreach (var task in GetTasksForDay(day.Date))
                    {
                        <div class="task-item @(task.IsCompleted ? "completed" : "")">
                           @*  <input type="checkbox" @bind="task.IsCompleted" />  *@
                            <input type="checkbox" @bind="task.IsCompleted" @bind:after="(() => UpdateTaskStatus(task))" />
                            <span class="task-description">@task.Description</span>
                            <button class="btn btn-danger btn-sm delete-task-btn" @onclick="(() => RemoveTask(day.Date, task))">X</button>
                        </div>
                    }

                    <div class="add-task-form">
                        <input type="text" @bind="NewTaskDescription[day.Date]"
                               placeholder="Nueva tarea..."
                               @onkeyup="@((KeyboardEventArgs e) => HandleAddTask(e, day.Date))" />
                        <button class="btn btn-success btn-sm" @onclick="(() => AddTask(day.Date))">Añadir</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    @using System.Globalization; // Puedes mantenerlo o quitarlo si no lo usas explícitamente para formatos
    
    public class DailyTask
    {
        // [JsonPropertyName("description")] // Puedes usar esto si quieres nombres específicos en el JSON, requiere using System.Text.Json.Serialization;
        public string Description { get; set; }
        // [JsonPropertyName("isCompleted")]
        public bool IsCompleted { get; set; }
        // [JsonPropertyName("category")]
        public string Category { get; set; } = "General";

        public DailyTask(string description)
        {
            Description = description;
            IsCompleted = false;
        }
    }

    // Almacenamiento de tareas (simulación en memoria por ahora)
    private Dictionary<DateTime, List<DailyTask>> WeeklyTasks { get; set; } = new Dictionary<DateTime, List<DailyTask>>();

    // Propiedades para la semana actual
    private DateTime CurrentDate { get; set; } = DateTime.Today;
    private DateTime StartDate => CurrentDate.StartOfWeek(DayOfWeek.Monday); // Comienza la semana en Lunes
    private DateTime EndDate => StartDate.AddDays(6);

    // Lista de los 7 días de la semana actual
    private List<(DateTime Date, DayOfWeek DayOfWeek)> DaysOfWeek { get; set; } = new List<(DateTime Date, DayOfWeek DayOfWeek)>();

    // Diccionario para guardar la descripción de la nueva tarea por cada día
    private Dictionary<DateTime, string> NewTaskDescription = new Dictionary<DateTime, string>();

    // --- Métodos de ciclo de vida del componente ---

    protected override async Task OnInitializedAsync() // ¡Importante: debe ser async Task!
    {
        // Cargar las tareas existentes del archivo JSON
        var loadedTasks = await StorageService.LoadTasksAsync();

        // Inicializar WeeklyTasks con las tareas cargadas o un nuevo diccionario si no hay.
        WeeklyTasks = loadedTasks ?? new Dictionary<DateTime, List<DailyTask>>();

        // Asegurarse de que DaysOfWeek esté inicializado con las fechas correctas de la semana actual
        // y que NewTaskDescription tenga entradas para todos los días de la semana actual.
        InitializeWeekDisplay(); // Un nuevo método para inicializar solo la visualización de la semana
        StateHasChanged();

    }
    // Nuevo método para inicializar solo la estructura de DaysOfWeek y NewTaskDescription
    private void InitializeWeekDisplay()
    {
        DaysOfWeek.Clear();
        NewTaskDescription.Clear();

        for (int i = 0; i < 7; i++)
        {
            var date = StartDate.AddDays(i);
            DaysOfWeek.Add((date, date.DayOfWeek));
            if (!NewTaskDescription.ContainsKey(date))
            {
                NewTaskDescription[date] = ""; // Asegura que el input de nueva tarea exista para cada día
            }
            // Asegúrate de que WeeklyTasks tiene una lista para cada día, incluso si está vacía
            if (!WeeklyTasks.ContainsKey(date.Date))
            {
                WeeklyTasks[date.Date] = new List<DailyTask>();
            }
        }
    }

    // --- Métodos de navegación de semanas ---

    private void InitializeWeek() // Vuelve a 'void' y elimina 'async'
    {
        DaysOfWeek.Clear();
        NewTaskDescription.Clear();
        WeeklyTasks.Clear();

        for (int i = 0; i < 7; i++)
        {
            var date = StartDate.AddDays(i);
            DaysOfWeek.Add((date, date.DayOfWeek));
            NewTaskDescription[date] = "";
            WeeklyTasks[date] = new List<DailyTask>(); // Inicializa una lista vacía para cada día
        }
    }
    private void PreviousWeek()
    {
        CurrentDate = CurrentDate.AddDays(-7);
        InitializeWeekDisplay(); // Solo actualiza la visualización de la semana
    }

    private void NextWeek()
    {
        CurrentDate = CurrentDate.AddDays(7);
        InitializeWeekDisplay(); // Solo actualiza la visualización de la semana
    }

    // --- Métodos para gestionar tareas ---

    private List<DailyTask> GetTasksForDay(DateTime date)
    {
        return WeeklyTasks.GetValueOrDefault(date.Date, new List<DailyTask>());
    }

    private async Task AddTask(DateTime date)
    {
        string description = NewTaskDescription[date];
        if (!string.IsNullOrWhiteSpace(description))
        {
            var newTask = new DailyTask(description);

            if (!WeeklyTasks.ContainsKey(date.Date))
            {
                WeeklyTasks[date.Date] = new List<DailyTask>();
            }
            WeeklyTasks[date.Date].Add(newTask);
            NewTaskDescription[date] = ""; // Limpiar el input

            await StorageService.SaveTasksAsync(WeeklyTasks); // <-- ¡Guardar en JSON!
        }
    }

    private async Task HandleAddTask(KeyboardEventArgs e, DateTime date) // CAMBIAR A ASYNC Y Task
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await AddTask(date); // Llamar al método asíncrono
        }
    }

    private async Task UpdateTaskStatus(DailyTask task)
    {
        // task.IsCompleted ya fue actualizado por @bind
        // No necesitamos buscar la fecha, ya que el diccionario completo se guarda.
        await StorageService.SaveTasksAsync(WeeklyTasks); // <-- ¡Guardar en JSON!
        StateHasChanged(); // Forzar actualización de la UI
    }

    private async Task RemoveTask(DateTime date, DailyTask taskToRemove)
    {
        if (WeeklyTasks.ContainsKey(date.Date))
        {
            WeeklyTasks[date.Date].Remove(taskToRemove);
            await StorageService.SaveTasksAsync(WeeklyTasks); // <-- ¡Guardar en JSON!
        }
        StateHasChanged(); // Forzar actualización de la UI
    }
}

<style>
    .weekly-planner-container {
        padding: 20px;
        font-family: Arial, sans-serif;
    }

    .planner-title {
        text-align: center;
        margin-bottom: 25px;
        color: #333;
    }

    .weekly-navigation {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-bottom: 20px;
        gap: 15px;
        /* Hacemos que la navegación sea columna en pantallas pequeñas directamente */
        flex-wrap: wrap; /* Permite que los elementos se envuelvan */
        flex-direction: row; /* Por defecto */
    }

        /* Ajuste para navegación en pantallas pequeñas (usando flex-wrap en lugar de media query) */
        .weekly-navigation button, .weekly-navigation span {
            flex-basis: auto; /* Permite que cada elemento decida su ancho */
            min-width: 120px; /* Asegura un ancho mínimo para los botones/span */
        }
    @@media (max-width: 500px) { /* Una media query más pequeña para la navegación si se quiere que se apilen */
        .weekly-navigation

    {
        flex-direction: column;
    }

    }


    .current-week-display {
        font-size: 1.2em;
        font-weight: bold;
        color: #555;
    }

    .week-grid {
        display: grid;
        /* Esta es la clave: auto-fit y minmax harán que la cuadrícula sea responsiva */
        grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); /* Min 180px antes de pasar a otra columna */
        gap: 15px;
    }

    .day-column {
        background-color: #f9f9f9;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 15px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        display: flex;
        flex-direction: column;
        min-height: 250px;
    }

    .day-header {
        text-align: center;
        margin-bottom: 15px;
        color: #007bff;
    }

    .tasks-list {
        flex-grow: 1;
    }

    .task-item {
        display: flex;
        align-items: center;
        background-color: #fff;
        border: 1px solid #eee;
        border-radius: 5px;
        padding: 10px;
        margin-bottom: 8px;
        box-shadow: 0 1px 2px rgba(0,0,0,0.03);
        transition: background-color 0.3s ease;
    }

        .task-item.completed {
            background-color: #e6ffe6;
            text-decoration: line-through;
            color: #777;
        }

        .task-item input[type="checkbox"] {
            margin-right: 10px;
            transform: scale(1.2);
        }

    .task-description {
        flex-grow: 1;
    }

    .delete-task-btn {
        margin-left: 10px;
        padding: 2px 8px;
        font-size: 0.8em;
    }

    .add-task-form {
        display: flex;
        gap: 5px;
        margin-top: 15px;
    }

        .add-task-form input[type="text"] {
            flex-grow: 1;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        .add-task-form .btn-success {
            padding: 8px 12px;
        }
</style>